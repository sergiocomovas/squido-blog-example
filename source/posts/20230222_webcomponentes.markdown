---
title: Componentes Web - Lit - WebComponents - Solid - Alpine...
permalink: webcomonents
description: Descubre el motivo por los que ahorras tiempo usando Componentes Web incluso si no usas compiladores. 
date: '2022-10-31 13:33:00'
tags: 
  - microservicios
  - javascript
  - lit
  - alpinejs
  - webcomponents
  - componentes
  - proyectos
  - 2023
mainimage: '../content/images/posts/20230222184547.png'
---
>![Componentes web sin aditivos](..\content\images\posts\20230222204632.png)  
>¬°Hola! En este art√≠culo voy a hablar sobre los componentes web, qu√© son y por qu√© son √∫tiles. Tambi√©n explicar√© c√≥mo funcionan los custom elements, que son una forma de crear etiquetas HTML personalizadas para renderizar componentes web. Adem√°s, hablar√© sobre c√≥mo se pueden crear componentes web utilizando JavaScript vanilla, as√≠ como utilizando librer√≠as como LitElement de Google.

## Componentes Web: Qu√© son y por qu√© son √∫tiles

Los **componentes web** son elementos de una p√°gina web que encapsulan una funcionalidad espec√≠fica y se pueden reutilizar en diferentes p√°ginas o aplicaciones web. Al crear componentes web, se pueden reducir la cantidad de c√≥digo repetitivo que se utiliza en una p√°gina web y, por lo tanto, se puede mejorar la **mantenibilidad** y la **escalabilidad** de la aplicaci√≥n.

Los componentes web son elegidos por los equipos de desarrollo por varias razones. En trabajos complejos con mucha incertidumbre, es importante trabajar con **sprints cortos** de tiempo y entregar un **MVP** (Producto M√≠nimo Viable) a tu cliente o gerente de la empresa para generar valor constantemente. Esto permite obtener retroalimentaci√≥n temprana y constante de los interesados, lo que puede ayudar a ajustar y refinar el producto a medida que se desarrolla. Adem√°s, en proyectos complejos, es probable que surjan nuevos requisitos y cambios constantemente: la filosof√≠a **Scrum**, que es un marco de trabajo ligero y flexible, puede permitir una mayor flexibilidad para manejar estos cambios.

## Custom Elements

Los **Custom Elements** son una caracter√≠stica de HTML que permiten crear **etiquetas personalizadas**. Estas etiquetas personalizadas se pueden utilizar para renderizar componentes web. Por convenci√≥n, las etiquetas personalizadas se nombran utilizando un gui√≥n (-) para separar las palabras. Por ejemplo, un elemento personalizado para un reproductor de m√∫sica podr√≠a llamarse `<music-player>`. Los Custom Elements se pueden crear utilizando JavaScript y se pueden registrar con el navegador utilizando el m√©todo `customElements.define()`.

## JavaScript Vanilla vs Lit

JavaScript Vanilla es el lenguaje de programaci√≥n que entienden los navegadores web. Con JavaScript Vanilla, es posible crear componentes web utilizando la API de Custom Elements. Sin embargo, hay librer√≠as y frameworks disponibles que pueden facilitar la creaci√≥n de componentes web. **Lit** es una de esas librer√≠as, creada por Google, que permite crear componentes web utilizando JavaScript, pero con una sintaxis m√°s simple y menos verbosa que la API de Custom Elements.

## Lit.dev

Lit est√° disponible como una biblioteca JavaScript que se puede utilizar en cualquier proyecto web. A diferencia de otras bibliotecas, Lit se puede utilizar sin Node.js, sin compilar o precompilar. Para utilizar **LitElement**, solo es necesario importar el archivo JavaScript en la p√°gina web y utilizar la directiva `type="module"` al declararlo en el HTML. Cuando se utiliza `defer` dentro de la etiqueta `<script>`, el archivo JavaScript se carga en segundo plano mientras la p√°gina se est√° renderizando.

## Ejemplo pr√°ctico

<iframe src="https://codesandbox.io/embed/componentes-web-forked-b16e4v?fontsize=14&hidenavigation=1&theme=dark"
     style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;"
     title="Componentes Web (forked)"
     allow="accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking"
     sandbox="allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"
   ></iframe>

Para ilustrar lo que hemos visto, he creado un ejemplo pr√°ctico que puedes encontrar en mi repositorio de GitHub.

* [Repositorio del proyecto](https://github.com/sergiocomovas/2023-02-componentes-web)
* [Proyecto subido al servidor](https://palmabot.comovas.es/webcomp/)

El ejemplo parte de un archivo base de HTML creado con la abreviaci√≥n emmet (`html:5` en el editor de c√≥digo). En este ejemplo, he creado dos componentes web diferentes: uno nativo y otro con Lit.

Para crear el componente nativo, he utilizado el elemento `<webcom-nativo>` y le he pasado un atributo con un mensaje personalizado:

```html
<webcom-nativo
  mensaje="Esto es un componente Web Nativo üß°"
></webcom-nativo>
```

Para el componente Lit, he utilizado el elemento <webcom-lit> y le he pasado un atributo con el nombre del componente:

```html
<webcom-lit nombre="Componente Lit"></webcom-lit>
```

Adem√°s, para a√±adir un poco m√°s de complejidad, he utilizado la biblioteca Alpine.js para agregar una peque√±a funcionalidad que carga datos de un archivo JSON:

```html
<div
  x-data="{ personas: [] }"
  x-init="personas = await (await fetch('/data/personas.json')).json()"
>
```

El resultado que puedo usar una `custom-tag` para buclear y, en definitiva, reutilizar el c√≥digo que es lo que pretend√≠a.

**Cosas que no me han salido bien:**

* En la versi√≥n alojada el [servidor](https://palmabot.comovas.es/webcomp/) he usado solidJs con literales en lugar de jsx, pero tuve problemas al alojar los scripts en mi servidor.  JSX es una extensi√≥n de JavaScript que permite escribir elementos de interfaz de usuario de manera similar a HTML.
* Otro intento fallido fue intentar encapsular Vue compilado en JS y utilizarlo como un elemento personalizado, pas√°ndole un par√°metro. Tambi√©n intent√© utilizar la galer√≠a de petit-vue, pero no logr√© que funcionara correctamente.

Aunque SolidJS tiene algunas caracter√≠sticas interesantes y Vue es una de mis herramientas favoritas para desarrollar aplicaciones web, en mi caso, no resultaron ser las mejores opci√≥n. Aprend√≠ que, a veces, es necesario probar varias herramientas hasta encontrar la adecuada para cada proyecto.

**Enlaces**

| T√≠tulo                                                  | URL                                                            | Explicaci√≥n breve                                                             |
| ------------------------------------------------------- | -------------------------------------------------------------- | ------------------------------------------------------------------------------ |
| JavaScript Template Literals                            | [Link](https://www.w3schools.com/JS//js_string_templates.asp)         | Una manera moderna de concatenar strings en JavaScript.                       |
| Usar elementos personalizados en Web Components (JS)     | [Link](https://developer.mozilla.org/es/docs/Web/Web_Components/Using_custom_elements) | Tutorial sobre c√≥mo crear elementos personalizados en Web Components con JS. |
| Crea componentes reutilizables con Lit                   | [Link](https://www.youtube.com/watch?v=MUtSrXUh6T8)                  | Tutorial en video sobre c√≥mo crear componentes reutilizables con Lit.         |
| Tutorial interactivo de Lit                             | [Link](https://lit.dev/tutorials/intro-to-lit/)                      | Tutorial interactivo para aprender a usar Lit.                                |
| Opciones sin compilar de Solid JS                        | [Link](https://www.solidjs.com/guides/getting-started#opciones-sin-compilar) | Documentaci√≥n sobre las opciones sin compilar de Solid JS.                  |
| Directiva x-init de Alpine JS                            | [Link](https://alpinejs.dev/directives/init)                         | Documentaci√≥n sobre c√≥mo usar la directiva x-init de Alpine JS.               |
| Single File Components (SFC) en Vue.js                   | [Link](https://vuejs.org/guide/scaling-up/sfc.html)                  | Tutorial sobre c√≥mo usar Single File Components (SFC) en Vue.js.              |
| Petite Vue: una versi√≥n reducida de Vue.js para proyectos peque√±os | [Link](https://github.com/vuejs/petite-vue)                     | Petite Vue es una versi√≥n reducida de Vue.js para proyectos peque√±os.         |

**Conclusiones**

Los componentes web son una forma efectiva de mejorar la escalabilidad y la mantenibilidad de una aplicaci√≥n web. Al encapsular funcionalidades espec√≠ficas en componentes web reutilizables, se puede reducir la cantidad de c√≥digo repetitivo que se utiliza en una p√°gina web y, por lo tanto, mejorar la mantenibilidad y la escalabilidad de la aplicaci√≥n. Siendo el equivalnete frontend a los microservicios del back.
