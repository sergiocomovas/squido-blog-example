---
title: Desplegando en AWS con DENO y DOCKER (FULL STACK)
permalink: desplegando_aws
description: Un reto para d√≠a de mi cumplea√±os, que ya he superado.. 
date: '2023-05-13 13:33:00'
tags: 
  - AWS
  - AWS-VPC
  - AWS-ECR
  - AWS-ECS
  - AWS-AIM
  - DOCKER
  - TYPESCRIPT
  - TWIND
  - PREACT
  - DENO-FRESH
  - DENO
  - DEV
  - COSAS-DEV
  - CODESANDBOX
  - 2023
mainimage: '../content/images/posts/20230513001842.png'
---

<figure><img src="../content/images/posts/20230513000751.png"></figure>

> En este art√≠culo, compartir√© mi experiencia al enfrentar el reto de desplegar DENO Fresh en un contenedor de AWS. Aunque no soy un experto en todas las tecnolog√≠as que utilic√©, pude superar el desaf√≠o gracias a las herramientas y tecnolog√≠as que utilic√©. **En este art√≠culo, explicar√© c√≥mo logr√© este objetivo y c√≥mo esta experiencia me ha ayudado a mejorar mis habilidades como programador**.

## Mi experimento con DENO FRESH.

Eleg√≠ "DENO FRESH" como plataforma para mi experimento de despliegue, a pesar de que es un mundo nuevo para m√≠ y presenta diferencias significativas en comparaci√≥n con NODE, VUE o QUASAR. En este entorno, levantar un servidor requiere indicar permisos y no hay paquetes, solo se llama a la galer√≠a por URL en un archivo de mapeo. Adem√°s, el lenguaje de programaci√≥n es tipado, lo que significa que se deben utilizar interfaces para indicar el tipo de variable, ya sea una cadena o un n√∫mero.

| URL | Descripci√≥n |
| --- | ----------- |
| [LINK](https://dev.to/j471n/typescript-interface-3748) | Art√≠culo sobre interfaces en TypeScript |
| [LINK](https://fresh.deno.dev/docs/introduction) | Documentaci√≥n oficial de DENO Fresh |
| [LINK](https://deno.com/manual@v1.33.3/runtime/http_server_apis) | Documentaci√≥n oficial de DENO sobre el uso del servidor HTTP |
| [LINK](https://www.youtube.com/watch?v=h1U7Iq5zgkc) | Video tutorial sobre el uso de DENO |


## Explorando las diferencias de DENO FRESH frente a otros frameworks.

Una de las caracter√≠sticas de DENO FRESH es que utiliza PREACT. Para ejemplificar el uso de SIGNALS, respet√© la arquitectura de "ISLAS" usada para mostrar fragmentos din√°micos de la p√°gina. En cuanto a los estilos, utilic√© Twind, el "clon" de Tailwind, lo que supuso descartar mis experimentos con la API de view-transitions que quer√≠a integrar en el proyecto. Sin embargo, a√∫n puedes encontrar los ejemplos realizados en los enlaces.

| URL | Descripci√≥n |
| --- | ----------- |
| [LINK](https://preactjs.com/guide/v10/components) | Documentaci√≥n oficial de Preact sobre componentes |
| [LINK](https://www.builder.io/blog/usesignal-is-the-future-of-web-frameworks) | Art√≠culo sobre SIGNALS en Builder.io |
| [LINK](https://preactjs.com/guide/v10/signals) | Documentaci√≥n oficial de Preact sobre el uso de SIGNALS |
| [LINK](https://twind.dev/) | Sitio web oficial de Twind |
| [LINK](https://codesandbox.io/s/view-transitions-api-dxfxdg) | Ejemplos de uso de la API view-transitions en CodeSandbox |

## Desplegando una aplicaci√≥n con DENO FRESH y Docker en AWS.

Para hacer el deploy, necesit√© investigar sobre el uso de Docker e instalarlo. Adem√°s, aprend√≠ sobre las im√°genes de Docker. Sin embargo, antes de esto, tuve que configurar el CLI de AWS, lo que implic√≥ generar un usuario en AIM y asignarle permisos. Esta fue la parte m√°s complicada del experimento, ya que en realidad hab√≠a dos m√≥dulos de AWS implicados: Elastic Container Registry y Elastic Container Service. Tambi√©n fue necesario abrir el puerto 8000.

<figure><img src="../content/images/posts/20230512233830.png"></figure>

| URL | Descripci√≥n |
| --- | ----------- |
| [LINK](https://fresh.deno.dev/docs/concepts/deployment) | Documentaci√≥n oficial de DENO Fresh sobre el despliegue |
| [LINK](https://hub.docker.com/r/denoland/deno) | Imagen de Docker oficial de DENO |
| [LINK](https://aws.amazon.com/es/cli) | Sitio web oficial de AWS CLI |
| [LINK](https://www.youtube.com/watch?v=TRLK6ZNpjB8) | Video tutorial sobre c√≥mo usar AWS ECR/ECS |
| [LINK](https://dev.to/aws-builders/docker-aws-elastic-container-registry-ecr-3cln) | Docker üê≥, AWS Elastic Container Registry (ECR)

## Un vistazo al futuro del desarrollo web en contenedores.

En general, estoy emocionado por el futuro de DENO y las posibilidades que ofrece para el desarrollo web moderno y el despliegue en servidores en contenedores que ya contienen todo lo necesario para funcionar incluido la distribuci√≥n de Linux (en el caso DENO, un Debian por defecto) ¬°Gracias por leer este art√≠culo y espero que te haya resultado √∫til e interesante! Por cierto: este el resultado final.

| URL | Descripci√≥n |
| --- | ----------- |
| [LINK](https://github.com/sergiocomovas/deno_proyecto.) | Repositorio de GitHub del proyecto de DENO |